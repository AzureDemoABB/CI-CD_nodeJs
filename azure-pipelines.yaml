trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  ACR_NAME: 'acrdemoabb'
  IMAGE_NAME: 'sampleapp'
  AKS_RESOURCE_GROUP: 'Terraform-ABB-DEMO'
  AKS_CLUSTER_NAME: 'ABB_Demo_Cluster'
  NAMESPACE: 'default'
  TAG: $(Build.BuildId)
  -group: ACR-Secrets  # This will fetch ACR_USERNAME and ACR_PASSWORD

parameters:
  - name: environment
    displayName: 'Select Deployment Namespace'
    type: string
    default: 'dev'
    values:
      - dev
      - test
      - preprod
      - prod
      - all 


stages:
- stage: Build
  jobs:
  - job: Build
    steps:
    - script: |
        docker build -t $(ACR_NAME).azurecr.io/$(IMAGE_NAME):$(TAG) .
        echo "$(ACR_PASSWORD)" | docker login $(ACR_NAME).azurecr.io -u $(ACR_USERNAME) --password-stdin
        docker push $(ACR_NAME).azurecr.io/$(IMAGE_NAME):$(TAG)
      displayName: 'Build and Push Docker Image'

- stage: Deploy_to_AKS
  displayName: 'Deploy to AKS'
  jobs:
  - ${{ if eq(parameters.environment, 'all') }}:
    - job: Deploy_All
      strategy:
        matrix:
          dev:
            NAMESPACE: 'dev'
          test:
            NAMESPACE: 'test'
          preprod:
            NAMESPACE: 'preprod'
          prod:
            NAMESPACE: 'prod'
      steps:
      - task: Kubernetes@1
        displayName: 'Login to AKS'
        inputs:
          connectionType: 'Azure Resource Manager'
          azureSubscriptionEndpoint: 'Azure-Terraform-Connection'
          azureResourceGroup: '$(AKS_RESOURCE_GROUP)'
          kubernetesCluster: '$(AKS_CLUSTER_NAME)'
          useClusterAdmin: true

      - script: |
          echo "Deploying to Namespace: $(NAMESPACE)"
          kubectl apply -f deployment.yaml -n $(NAMESPACE)
          kubectl apply -f service.yaml -n $(NAMESPACE)
        displayName: 'Apply Kubernetes Deployment'

  - ${{ if ne(parameters.environment, 'all') }}:
    - job: Deploy_Single
      steps:
      - task: Kubernetes@1
        displayName: 'Login to AKS'
        inputs:
          connectionType: 'Azure Resource Manager'
          azureSubscriptionEndpoint: 'Azure-Terraform-Connection'
          azureResourceGroup: '$(AKS_RESOURCE_GROUP)'
          kubernetesCluster: '$(AKS_CLUSTER_NAME)'
          useClusterAdmin: true

      - script: |
          echo "Deploying to Namespace: ${{ parameters.environment }}"
          kubectl apply -f deployment.yaml -n ${{ parameters.environment }}
          kubectl apply -f service.yaml -n ${{ parameters.environment }}
        displayName: 'Apply Kubernetes Deployment'
