trigger: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: ACR-Secrets
  - name: TAG
    value: $(Build.BuildId)


parameters:
  - name: namespace
    displayName: 'Select Deployment Namespace'
    type: string
    default: 'nonprod'
    values:
      - nonprod
      - preprod
      - prod
      - all 

  - name : acr_name
    displayName: ACR Name
    type: string
    default: 'acrdemoabb'
  
  - name : image_name
    displayName: Image Name
    type: string
    default: 'sampleapp'

  - name : cluster_name
    displayName: Cluster Name
    type: string
    default: 'ABB_Demo_Cluster'

  - name : resource_group
    displayName: Resource group Name
    type: string
    default: 'Terraform-ABB-DEMO'

stages:
- stage: Build
  jobs:
  - job: Build
    steps:
    - script: |
        docker build -t ${{ parameters.acr_name }}.azurecr.io/${{ parameters.image_name }}:$(TAG) .
        echo "$(ACR_PASSWORD)" | docker login $(ACR_NAME).azurecr.io -u $(ACR_USERNAME) --password-stdin
        docker push ${{ parameters.acr_name }}.azurecr.io/${{ parameters.image_name }}:$(TAG)
      displayName: 'Build and Push Docker Image'

- stage: Deploy_to_AKS
  displayName: 'Deploy to AKS'
  jobs:
  - ${{ if eq(parameters.namespace, 'all') }}:
    - job: Deploy_All
      strategy:
        matrix:
          dev:
            NAMESPACE: 'dev'
          test:
            NAMESPACE: 'test'
          preprod:
            NAMESPACE: 'preprod'
          prod:
            NAMESPACE: 'prod'
      steps:
      - task: Kubernetes@1
        displayName: 'Login to AKS'
        inputs:
          connectionType: 'Azure Resource Manager'
          azureSubscriptionEndpoint: 'Azure-Terraform-Connection'
          azureResourceGroup: ${{ parameters.resource_group }}
          kubernetesCluster: ${{ parameters.cluster_name }}
          useClusterAdmin: true

      - script: |
          echo "Deploying to Namespace: ${{ parameters.namespace }}"
          kubectl apply -f deployment.yaml -n ${{ parameters.namespace }}
          kubectl apply -f service.yaml -n ${{ parameters.namespace }}
        displayName: 'Apply Kubernetes Deployment'

  - ${{ if ne(parameters.namespace, 'all') }}:
    - job: Deploy_Single
      steps:
      - task: Kubernetes@1
        displayName: 'Login to AKS'
        inputs:
          connectionType: 'Azure Resource Manager'
          azureSubscriptionEndpoint: 'Azure-Terraform-Connection'
          azureResourceGroup: ${{ parameters.resource_group }}
          kubernetesCluster: ${{ parameters.cluster_name }}
          useClusterAdmin: true

      - script: |
          echo "Deploying to Namespace: ${{ parameters.namespace }}"
          kubectl apply -f deployment.yaml -n ${{ parameters.namespace }}
          kubectl apply -f service.yaml -n ${{ parameters.namespace }}
        displayName: 'Apply Kubernetes Deployment'
